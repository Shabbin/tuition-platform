const mongoose = require('mongoose');
const TeacherRequest = require('../models/teacherRequest');

const MONGO_URI = 'mongodb+srv://tuitionAdmin:tuitofy1234@cluster0.21atyhi.mongodb.net/tuition-platform';

async function removeDuplicates() {
  try {
    await mongoose.connect(MONGO_URI);
    console.log('âœ… Connected to MongoDB');

    // Step 1: Aggregate approved requests grouped by teacherId, studentId, postId
    const duplicates = await TeacherRequest.aggregate([
      { $match: { status: 'approved' } },
      {
        $group: {
          _id: { teacherId: '$teacherId', studentId: '$studentId', postId: '$postId' },
          docs: { $push: { _id: '$_id', createdAt: '$createdAt' } },
          count: { $sum: 1 }
        }
      },
      { $match: { count: { $gt: 1 } } } // Only groups with duplicates
    ]);

    console.log(`Found ${duplicates.length} duplicate groups.`);

    let totalDeleted = 0;

    // Step 2: For each group, keep the latest by createdAt, delete others
    for (const group of duplicates) {
      // Sort docs descending by createdAt, keep first
      const sortedDocs = group.docs.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));

      const [latestDoc, ...toDelete] = sortedDocs;

      const deleteIds = toDelete.map(doc => doc._id);

      const res = await TeacherRequest.deleteMany({ _id: { $in: deleteIds } });
      totalDeleted += res.deletedCount;

      console.log(`Kept ${latestDoc._id}, deleted ${res.deletedCount} duplicates`);
    }

    console.log(`ðŸŽ‰ Deduplication complete. Total deleted: ${totalDeleted}`);

    await mongoose.disconnect();
    console.log('Disconnected from MongoDB');
  } catch (err) {
    console.error('Error during deduplication:', err);
  }
}

removeDuplicates();
